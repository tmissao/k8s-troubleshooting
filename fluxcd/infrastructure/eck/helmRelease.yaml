---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: eck-operator
  namespace: flux-system
spec:
  interval: 1m
  targetNamespace: elastic-system
  chart:
    spec:
      chart: eck-operator
      version: '2.15.0'
      sourceRef:
        kind: HelmRepository
        name: elastic
        namespace: flux-system
  install:
    createNamespace: true
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: eck-stack
  namespace: flux-system
spec:
  interval: 1m
  targetNamespace: elastic-system
  chart:
    spec:
      chart: eck-stack
      version: '0.13.x'
      sourceRef:
        kind: HelmRepository
        name: elastic
        namespace: flux-system
  install:
    createNamespace: true
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  values:
    eck-elasticsearch:
      enabled: true
      fullnameOverride: elasticsearch
      http:
        tls:
          selfSignedCertificate:
            disabled: true
      transport:
        tls:
          selfSignedCertificate:
            disabled: true
      nodeSets:
        - name: default
          count: 1
          podTemplate:
            spec:
              containers:
              - name: elasticsearch
                readinessProbe:
                  exec:
                    command:
                    - bash
                    - -c
                    - /mnt/elastic-internal/scripts/readiness-probe-script.sh
                  failureThreshold: 3
                  initialDelaySeconds: 10
                  periodSeconds: 12
                  successThreshold: 1
                  timeoutSeconds: 12
                env:
                - name: READINESS_PROBE_TIMEOUT
                  value: "10"
          config:
            node.store.allow_mmap: false
            xpack.security.enabled: false
    eck-kibana:
      enabled: true
      fullnameOverride: kibana
      elasticsearchRef:
        name: elasticsearch
      http:
        tls:
          selfSignedCertificate:
            disabled: true
    eck-logstash:
      enabled: true
      fullnameOverride: logstash
      elasticsearchRefs:
        - name: elasticsearch
          clusterName: demo
      config:
        pipeline.workers: 4
        log.level: warn
      services:
      - name: beats
        service:
          spec:
            type: ClusterIP
            ports:
              - port: 5050
                name: filebeat
                protocol: TCP
                targetPort: 5050
      pipelines:
        - pipeline.id: main
          config.string: |
            input {
              beats {
                port => 5050
              }
            }

            filter {
              if [type] == "kubernetes" and [k8s_cluster] {
                date {
                  match => [ "timestamp", "ISO8601" ]
                }
                mutate {
                  rename => { "type" => "orig_type" }
                  add_field => { "type" => "k8s_%{k8s_cluster}_%{[app][name]}" }
                }
                if "beats_input_codec_plain_applied" in [tags] {
                    mutate {
                        remove_field => ["tags"]
                    }
                }
                if [httpversion] {
                  mutate {
                    gsub => ["httpversion", "HTTP/", ""]
                  }
                }
                if [basepath] {
                  mutate {
                    gsub => ["basepath", "^$", "/"]
                  }
                } else {
                  mutate {
                    add_field => { "basepath" => "/" }
                  }
                }
                if [request] {
                  grok {
                    match => [ "request", '^/(?<locale>[a-z]{2})(?:\/|\?|$)']
                    tag_on_failure => "_grokparsefailure-locale"
                  }
                }
                if [user_agent] {
                  useragent {
                    source => "user_agent"
                    target => "useragent"
                  }
                }
              }
            }

            output {
              if [env] {
                elasticsearch {
                  hosts => ["${DEMO_ES_HOSTS}"]
                  index => "%{[type]}-%{+YYYY.MM.dd}"
                }
              } 
              stdout {
                codec => rubydebug
              }
            }